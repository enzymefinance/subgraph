#################################################
# Interfaces
#################################################

interface Event {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
}

interface NetworkEvent {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
}

interface FundEvent {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
}

interface SharesChange {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  investment: Investment!
  shares: BigDecimal!
  transaction: Transaction!
}

interface Metric {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  events: [FundEvent!]!
}

#################################################
# Low-level fund event entities
#################################################

type NewFundDeployedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  comptrollerProxy: Comptroller!
  vaultProxy: Fund!
  caller: Account!
  fundOwner: Account!
  fundName: String!
  denominationAsset: Asset!
  feeManagerConfig: String!
  policyManagerConfig: String!
  transaction: Transaction!
}

type ComptrollerProxyDeployedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  comptrollerProxy: Comptroller!
  fundOwner: Account!
  transaction: Transaction!
}

type FundStatusUpdatedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  prevStatus: Int!
  nextStatus: Int!
  timestamp: BigInt!
  transaction: Transaction!
}

type FundConfigSetEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  denominationAsset: Asset!
  vaultProxy: Fund!
  feeManagerConfig: String!
  policyManagerConfig: String!
  timestamp: BigInt!
  transaction: Transaction!
}

type SharesBoughtEvent implements Event & FundEvent & SharesChange @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  investor: Account!
  investment: Investment!
  shares: BigDecimal!
  asset: Asset!
  quantity: BigDecimal!
  timestamp: BigInt!
  transaction: Transaction!
}

type SharesRedeemedEvent implements Event & FundEvent & SharesChange @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  investor: Account!
  investment: Investment!
  shares: BigDecimal!
  assets: [Asset!]!
  quantities: [BigDecimal!]!
  timestamp: BigInt!
  transaction: Transaction!
}

# TODO: implement when fees are implemented in protocol

# type SharesReward implements Event & SharesChange @entity {
#   id: ID!
#   fund: Fund!
#   account: Account!
#   contract: Contract!
#   investor: Account!
#   investment: Investment!
#   shares: BigDecimal!
#   timestamp: BigInt!
#   transaction: Transaction!
# }

type AmguPaidEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  payer: Account!
  amount: BigDecimal!
  gas: Int!
  transaction: Transaction!
}

type AssetWithdrawnEvent implements Event & FundEvent @entity {
  id: ID!
  asset: Asset!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  target: String!
  amount: BigDecimal!
}

type TrackedAssetAddedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  asset: Asset!
  timestamp: BigInt!
  transaction: Transaction!
}

type TrackedAssetRemovedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  asset: Asset!
  timestamp: BigInt!
  transaction: Transaction!
}

type CallOnIntegrationExecutedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  adapter: String!
  incomingAssets: [Asset!]!
  incomingAssetAmounts: [BigDecimal!]!
  outgoingAssets: [Asset!]!
  outgoingAssetAmounts: [BigDecimal!]!
  timestamp: BigInt!
  transaction: Transaction!
}

type MigrationSignaledEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
}

type MigrationCancelledEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
}

type MigrationExecutedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
}

type PostCancelMigrationOriginHookFailedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
  failureData: Bytes!
}

type PostCancelMigrationTargetHookFailedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
  failureData: Bytes!
}

type PreMigrateOriginHookFailedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
  failureData: Bytes!
}

type PostMigrateOriginHookFailedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
  failureData: Bytes!
}

type PreSignalMigrationOriginHookFailedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
  failureData: Bytes!
}

type PostSignalMigrationOriginHookFailedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
  failureData: Bytes!
type FeeEnabledForFundEvent implements Event & FundEvent @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  timestamp: BigInt!
  transaction: Transaction!
  fee: Fee!
  comptrollerProxy: Comptroller!
  settingsData: Bytes!
}

type FeeSettledForFundEvent implements Event & FundEvent @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Comptroller!
  fee: Fee!
  payer: Fund!
  payee: Account!
  sharesDue: BigDecimal!
}

type FeeSharesOutstandingPaidForFundEvent implements Event & FundEvent @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Comptroller!
  fee: Fee!
  payer: Fund!
  payee: Account!
  sharesDue: BigDecimal!
}

type PolicyEnabledForFundEvent implements Event & FundEvent @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  policy: Policy!
  timestamp: BigInt!
  transaction: Transaction!
}

type AccessorSetEvent implements Event & FundEvent @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  prevAccessor: Comptroller
  nextAccessor: Comptroller!
  transaction: Transaction!
  timestamp: BigInt!
}

type OwnerSetEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  prevOwner: Account
  nextOwner: Account!
}

type MigratorSetEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  prevMigrator: Account!
  nextMigrator: Account!
}

type VaultLibSetEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  prevVaultLib: String!
  nextVaultLib: String!
}

#  approvals will only be applicable if and when the transfer of fund shares is allowed.
#  see comments in mappings/VaultLib.ts to enable event monitoring for these entities

# type ApprovalEvent implements Event & FundEvent @entity {
#   id: ID!
#   fund: Fund!
#   account: Account!
#   contract: Contract!
#   timestamp: BigInt!
#   transaction: Transaction!
#   owner: Account!
#   spender: IntegrationAdapter!
#   value: BigDecimal!
# }

type TransferEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  from: String!
  to: String!
  amount: BigDecimal!
}

#################################################
# Low-level network event entities
#################################################

type AdapterRegisteredEvent implements Event & NetworkEvent @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  integrationAdapter: IntegrationAdapter!
}

type AdapterDeregisteredEvent implements Event & NetworkEvent @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  integrationAdapter: IntegrationAdapter!
}

type PolicyRegisteredEvent implements Event & NetworkEvent @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  policy: Policy!
}

type PolicyDeregisteredEvent implements Event & NetworkEvent @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  policy: Policy!
}

type FundDeployerSetEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  nextFundDeployer: FundDeployer!
  prevFundDeployer: FundDeployer
  transaction: Transaction!
}

type AmguPriceSetEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  price: BigDecimal!
  transaction: Transaction!
}

type MlnTokensBurnedEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  amount: BigDecimal!
  transaction: Transaction!
}

type FrozenEtherThawedEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  amount: BigDecimal!
  transaction: Transaction!
}

type AmguPaidInEtherEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  amount: BigDecimal!
  transaction: Transaction!
}

type EtherTakerAddedEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  etherTaker: String!
  transaction: Transaction!
}

type EtherTakerRemovedEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  etherTaker: String!
  transaction: Transaction!
}

type OwnershipTransferredEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  previousOwner: String!
  newOwner: String!
  timestamp: BigInt!
  transaction: Transaction!
}

type PriceFeedSetEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!

  derivative: Asset!
  nextPriceFeed: PriceFeed!
  prevPriceFeed: PriceFeed
}

type AggregatorSetEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!

  primitive: Asset!
  nextPriceFeed: PriceFeed!
  prevPriceFeed: PriceFeed
}

type VaultProxyDeploymentEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  fundDeployer: FundDeployer!
  owner: Account!
  fund: Fund!
  vaultLib: VaultLib!
  accessor: Comptroller!
  fundName: String!
}

type FeeRegisteredEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  fee: Fee!
  identifier: String!
}

type FeeDeregisteredEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!

  fee: Fee!
  identifier: String!
}

#################################################
# High-level entities
#################################################

type Fee @entity {
  id: ID!
  identifier: String!
  funds: [Fund!]!
}

type IntegrationAdapter @entity {
  id: ID!
  identifier: String!
  contract: Contract!
}

type Transaction @entity {
  id: ID!
  from: String!
  to: String
  contract: Contract
  value: BigDecimal!
  timestamp: BigInt!
  block: BigInt!
  gasUsed: Int!
  gasPrice: BigDecimal!
  input: String!
  events: [Event!]! @derivedFrom(field: "transaction")
}

type Contract @entity {
  id: ID!
  name: String!
  timestamp: BigInt!
  events: [Event!]! @derivedFrom(field: "contract")
}

type FundDeployer @entity {
  id: ID!
  release: Release! @derivedFrom(field: "fundDeployer")
  funds: [Fund!]! @derivedFrom(field: "fundDeployer")
}

type Comptroller @entity {
  id: ID!
}

type VaultLib @entity {
  id: ID!
}

type ComptrollerLib @entity {
  id: ID!
}

type Dispatcher @entity {
  id: ID!
}

type Fund @entity {
  id: ID!
  name: String!
  inception: BigInt!
  # Added as convenience, but it's the same as Release
  fundDeployer: FundDeployer!
  # This is our accessor for this fund (only for this release)
  accessor: Comptroller!
  release: Release!
  status: String!
  manager: Account!
  migrator: String
  denominationAsset: Asset!
  trackedAssets: [Asset!]!
  policies: [Policy!]!
  fees: [Fee!]!
  investments: [Investment!]! @derivedFrom(field: "fund")
  shares: Share!
  sharesHistory: [Share!]! @derivedFrom(field: "fund")
  portfolio: Portfolio!
  portfolioHistory: [Portfolio!]! @derivedFrom(field: "fund")
  state: State!
  stateHistory: [State!]! @derivedFrom(field: "fund")
  events: [FundEvent!]! @derivedFrom(field: "fund")
  creator: Account!
  migrations: [Migration!] @derivedFrom(field: "fund")
}

type Migration @entity {
  id: ID!
  prevRelease: Release!
  nextRelease: Release!
  fund: Fund!
  signalTimestamp: BigInt!
  executed: Boolean!
  cancelled: Boolean!
  nextAccessor: Comptroller!
}

type Release @entity {
  # This ID is the FundDeployer address
  id: ID!
  # Gets updated when new FundDeployer is deployed (handleCurrentFundDeployerSet event)
  current: Boolean!
  currentStart: BigInt!
  currentEnd: BigInt
  # Same as the ID, added as a convenience
  fundDeployer: FundDeployer!
  # This is shared by all funds on same release
  comptrollerLib: ComptrollerLib!
  vaultLib: VaultLib!
  dispatcher: Dispatcher!
  engine: Engine!
  derivativePriceFeed: PriceFeed!
  feeManager: Manager!
  integrationManager: Manager!
  policyManager: Manager!
  primitivePriceFeed: PriceFeed!
  valueInterpreter: ValueInterpreter!
  funds: [Fund!] @derivedFrom(field: "release")
}

type Account @entity {
  id: ID!
  firstSeen: BigInt!
  manager: Boolean!
  managements: [Fund!]! @derivedFrom(field: "manager")
  investor: Boolean!
  investments: [Investment!]! @derivedFrom(field: "investor")
  events: [FundEvent!]! @derivedFrom(field: "account")
}

type Investment @entity {
  id: ID!
  fund: Fund!
  investor: Account!
  changes: [SharesChange!]! @derivedFrom(field: "investment")
  shares: BigDecimal!
}

type Asset @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
  isDerivative: Boolean!
  derivedFrom: [Asset!]
  priceFeed: PriceFeed!
  fundsDenomination: [Fund!]! @derivedFrom(field: "denominationAsset")
  fundsTracking: [Fund!]!
}

type PriceFeed @entity {
  id: ID!
  assets: [Asset!]!
}

type Policy @entity {
  id: ID!
  identifier: String!
  funds: [Fund!]!
}

type Share implements Metric @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  shares: BigDecimal!
  events: [FundEvent!]!
}

type Holding implements Metric @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  asset: Asset!
  quantity: BigDecimal!
  events: [FundEvent!]!
}

type Portfolio implements Metric @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  holdings: [Holding!]!
  events: [FundEvent!]!
}

type State implements Metric @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  shares: Share!
  portfolio: Portfolio!
  # payouts: Payout!
  events: [FundEvent!]!
}
