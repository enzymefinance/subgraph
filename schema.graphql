#################################################
# Interfaces
#################################################

interface Event {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
}

interface NetworkEvent {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
}

interface FundEvent {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
}

interface SharesChange {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  investment: Investment!
  shares: BigDecimal!
  transaction: Transaction!
}

interface Metric {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  events: [FundEvent!]!
}

#################################################
# Low-level fund event entities
#################################################

type FundDeployment implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  comptrollerProxy: Comptroller!
  vaultProxy: Fund!
  fundOwner: Account!
  fundName: String!
  denominationAsset: Asset!
  feeManagerConfig: String!
  policyManagerConfig: String!
  transaction: Transaction!
}

type ComptrollerProxyDeployment implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  comptrollerProxy: Comptroller!
  fundOwner: Account!
  transaction: Transaction!
}

type FundStatusUpdate implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  prevStatus: Int!
  nextStatus: Int!
  timestamp: BigInt!
  transaction: Transaction!
}

type FundConfigSetting implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  denominationAsset: Asset!
  vaultProxy: Fund!
  feeManagerConfig: String!
  policyManagerConfig: String!
  timestamp: BigInt!
  transaction: Transaction!
}

type SharesAddition implements Event & FundEvent & SharesChange @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  investor: Account!
  investment: Investment!
  shares: BigDecimal!
  asset: Asset!
  quantity: BigDecimal!
  timestamp: BigInt!
  transaction: Transaction!
}

type SharesRedemption implements Event & FundEvent & SharesChange @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  investor: Account!
  investment: Investment!
  shares: BigDecimal!
  assets: [Asset!]!
  quantities: [BigDecimal!]!
  timestamp: BigInt!
  transaction: Transaction!
}

type SharesReward implements Event & SharesChange @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  investor: Account!
  investment: Investment!
  shares: BigDecimal!
  timestamp: BigInt!
  transaction: Transaction!
}

type AmguPayment implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  payer: Account!
  amount: BigDecimal!
  gas: Int!
  transaction: Transaction!
}

type AssetWithdrawal implements Event & FundEvent @entity {
  id: ID!
  asset: Asset!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  target: String!
  amount: BigInt!
}

type TrackedAssetAddition implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  asset: Asset!
  timestamp: BigInt!
  transaction: Transaction!
}

type TrackedAssetRemoval implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  asset: Asset!
  timestamp: BigInt!
  transaction: Transaction!
}

type CallOnIntegrationExecution implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  adapter: String!
  incomingAssets: [Asset!]!
  incomingAssetAmounts: [BigInt!]!
  outgoingAssets: [Asset!]!
  outgoingAssetAmounts: [BigInt!]!
  timestamp: BigInt!
  transaction: Transaction!
}

type PolicyEnabled implements Event & FundEvent @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  policy: Policy!
  timestamp: BigInt!
  transaction: Transaction!
}

type AccessorSetEvent implements Event  & FundEvent @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  prevAccessor: Comptroller!
  nextAccessor: Comptroller!
  transaction: Transaction!
  timestamp: BigInt!
}

type ApprovalGranted implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  owner: Account!
  spender: Adapter!
  value: BigInt!
}

#################################################
# Low-level network event entities
#################################################

type IntegrationRegistration implements Event  @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  adapter: Adapter!
}

type IntegrationDeregistration implements Event  @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  adapter: Adapter!
}

type PolicyRegistration implements Event  @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  policy: Policy!
}

type PolicyDeregistration implements Event  @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  policy: Policy!
}

type FundDeployerSet implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  nextFundDeployer: FundDeployer!
  prevFundDeployer: FundDeployer
  transaction: Transaction!
}

type AmguPriceChange implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  price: BigDecimal!
  transaction: Transaction!
}

type MlnTokensBurn implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  amount: BigDecimal!
  transaction: Transaction!
}

type FrozenEtherThaw implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  amount: BigDecimal!
  transaction: Transaction!
}

type AmguPaymentInEther implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  amount: BigDecimal!
  transaction: Transaction!
}

type EtherTakerAddition implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  etherTaker: String!
  transaction: Transaction!
}

type EtherTakerRemoval implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  etherTaker: String!
  transaction: Transaction!
}

type FundDeployerOwnershipTransfer implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  previousOwner: String!
  newOwner: String!
  timestamp: BigInt!
  transaction: Transaction!
}



#################################################
# High-level entities
#################################################

type Adapter @entity {
  id: ID!
  identifier: String!
  contract: Contract!
}

type Accessor @entity {
  id: ID!
  contract: Contract!
}

type Transaction @entity {
  id: ID!
  from: String!
  to: String
  contract: Contract
  value: BigDecimal!
  timestamp: BigInt!
  block: BigInt!
  gasUsed: Int!
  gasPrice: BigDecimal!
  input: String!
  events: [Event!]! @derivedFrom(field: "transaction")
}

type Contract @entity {
  id: ID!
  name: String!
  timestamp: BigInt!
  events: [Event!]! @derivedFrom(field: "contract")
}

type FundDeployer @entity {
  id: ID!
  current: Boolean!
  currentStart: BigInt!
  currentEnd: BigInt
  funds: [Fund!]! @derivedFrom(field: "deployer")
}

type Comptroller @entity {
  id: ID!
}

type Fund @entity {
  id: ID!
  name: String!
  inception: BigInt!
  deployer: FundDeployer!
  status: String!
  manager: Account!
  denominationAsset: Asset!
  comptroller: Comptroller!
  trackedAssets: [Asset!]!
  shares: Share!
  sharesHistory: [Share!]! @derivedFrom(field: "fund")
  portfolio: Portfolio!
  portfolioHistory: [Portfolio!]! @derivedFrom(field: "fund")
  state: State!
  stateHistory: [State!]! @derivedFrom(field: "fund")
  events: [FundEvent!]! @derivedFrom(field: "fund")
  policies: [Policy!]! 
}

type Account @entity {
  id: ID!
  manager: Boolean!
  managements: [Fund!]! @derivedFrom(field: "manager")
  investor: Boolean!
  investments: [Investment!]! @derivedFrom(field: "investor")
  events: [FundEvent!]! @derivedFrom(field: "account")
}

type Investment @entity {
  id: ID!
  fund: Fund!
  investor: Account!
  # changes: [SharesChange!]! @derivedFrom(field: "investment")
  shares: BigDecimal!
}

type Asset @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
}

type Policy @entity {
  id: ID!
  timestamp: BigInt!
  identifier: String!
  funds: [Fund!]!
}

type Share implements Metric @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  shares: BigDecimal!
  events: [FundEvent!]!
}

type Holding implements Metric @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  asset: Asset!
  quantity: BigDecimal!
  events: [FundEvent!]!
}

type Portfolio implements Metric @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  holdings: [Holding!]!
  events: [FundEvent!]!
}

type State implements Metric @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  shares: Share!
  portfolio: Portfolio!
  # payouts: Payout!
  events: [FundEvent!]!
}
