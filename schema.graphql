#################################################
# Interfaces
#################################################

interface Event {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
}

interface NetworkEvent {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
}

interface FundEvent {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
}

interface SharesChange {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  investment: Investment!
  shares: BigDecimal!
  transaction: Transaction!
}

interface Metric {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  events: [FundEvent!]!
}

interface FeeSetting {
  id: ID!
  fee: Fee!
  fund: Fund!
  timestamp: BigInt!
  events: [FundEvent!]!
}

interface PolicySetting {
  id: ID!
  policy: Policy!
  fund: Fund!
  timestamp: BigInt!
  events: [FundEvent!]!
}

#################################################
# Low-level fund event entities
#################################################

type NewFundCreatedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  comptrollerProxy: Contract!
  vaultProxy: Fund!
  creator: Account!
  fundOwner: Account!
  fundName: String!
  denominationAsset: Asset!
  feeManagerConfigData: String!
  policyManagerConfigData: String!
  transaction: Transaction!
}

type ComptrollerProxyDeployedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  comptrollerProxy: Contract!
  transaction: Transaction!
}

type StatusUpdatedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  nextStatus: Int!
  timestamp: BigInt!
  transaction: Transaction!
}

type VaultProxySetEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  vaultProxy: String!
}

type SharesBoughtEvent implements Event & FundEvent & SharesChange @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  investor: Account!
  investment: Investment!
  shares: BigDecimal!
  asset: Asset!
  quantity: BigDecimal!
  timestamp: BigInt!
  transaction: Transaction!
}

type SharesRedeemedEvent implements Event & FundEvent & SharesChange @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  investor: Account!
  investment: Investment!
  shares: BigDecimal!
  assets: [Asset!]!
  quantities: [BigDecimal!]!
  timestamp: BigInt!
  transaction: Transaction!
}

type AmguPaidEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  payer: Account!
  amount: BigDecimal!
  gas: Int!
  transaction: Transaction!
}

type AssetWithdrawnEvent implements Event & FundEvent @entity {
  id: ID!
  asset: Asset!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  target: String!
  amount: BigDecimal!
}

type TrackedAssetAddedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  asset: Asset!
  timestamp: BigInt!
  transaction: Transaction!
}

type TrackedAssetRemovedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  asset: Asset!
  timestamp: BigInt!
  transaction: Transaction!
}

type CallOnIntegrationExecutedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  adapter: String!
  incomingAssets: [Asset!]!
  incomingAssetAmounts: [BigDecimal!]!
  outgoingAssets: [Asset!]!
  outgoingAssetAmounts: [BigDecimal!]!
  timestamp: BigInt!
  transaction: Transaction!
}

type MigrationSignaledEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
}

type MigrationCancelledEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
}

type MigrationExecutedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
}

type PostCancelMigrationOriginHookFailedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
  failureData: Bytes!
}

type PostCancelMigrationTargetHookFailedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
  failureData: Bytes!
}

type PreMigrateOriginHookFailedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
  failureData: Bytes!
}

type PostMigrateOriginHookFailedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
  failureData: Bytes!
}

type PreSignalMigrationOriginHookFailedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
  failureData: Bytes!
}

type PostSignalMigrationOriginHookFailedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
  failureData: Bytes!
}

type FeeEnabledForFundEvent implements Event & FundEvent @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  timestamp: BigInt!
  transaction: Transaction!
  fee: Fee!
  comptrollerProxy: Contract!
  settingsData: Bytes!
}

type FeeSettledForFundEvent implements Event & FundEvent & SharesChange @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  timestamp: BigInt!
  transaction: Transaction!
  investment: Investment!
  shares: BigDecimal!
  comptrollerProxy: Contract!
  fee: Fee!
  payer: Fund!
  payee: Account!
  sharesDue: BigDecimal!
}

type FeeSharesOutstandingPaidForFundEvent implements Event & FundEvent & SharesChange @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  timestamp: BigInt!
  transaction: Transaction!
  investment: Investment!
  shares: BigDecimal!
  comptrollerProxy: Contract!
  fee: Fee!
  payer: Fund!
  payee: Account!
  sharesDue: BigDecimal!
}

type PolicyEnabledForFundEvent implements Event & FundEvent @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  policy: Policy!
  timestamp: BigInt!
  transaction: Transaction!
}

type AccessorSetEvent implements Event & FundEvent @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  prevAccessor: Contract
  nextAccessor: Contract!
  transaction: Transaction!
  timestamp: BigInt!
}

type OwnerSetEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  prevOwner: Account
  nextOwner: Account!
}

type MigratorSetEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  prevMigrator: Account
  nextMigrator: Account!
}

type VaultLibSetEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  prevVaultLib: Contract
  nextVaultLib: Contract!
}

#  approvals will only be applicable if and when the transfer of fund shares is allowed.
#  see comments in mappings/VaultLib.ts to enable event monitoring for these entities

# type ApprovalEvent implements Event & FundEvent @entity {
#   id: ID!
#   fund: Fund!
#   account: Account!
#   contract: Contract!
#   timestamp: BigInt!
#   transaction: Transaction!
#   owner: Account!
#   spender: IntegrationAdapter!
#   value: BigDecimal!
# }

type TransferEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  from: String!
  to: String!
  amount: BigDecimal!
}

type AdapterBlacklistAddressesAddedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [IntegrationAdapter!]!
}

type AdapterBlacklistAddressesRemovedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [IntegrationAdapter!]!
}

type AdapterWhitelistAddressesAddedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [IntegrationAdapter!]!
}

type AdapterWhitelistAddressesRemovedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [IntegrationAdapter!]!
}

type AssetBlacklistAddressesAddedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [Asset!]!
}

type AssetBlacklistAddressesRemovedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [Asset!]!
}

type AssetWhitelistAddressesAddedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [Asset!]!
}

type AssetWhitelistAddressesRemovedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [Asset!]!
}

type InvestorWhitelistAddressesAddedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [Account!]!
}

type InvestorWhitelistAddressesRemovedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [Account!]!
}

type MaxConcentrationSetEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  value: BigDecimal!
}

type ManagementFeeSettingsAddedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  rate: BigDecimal!
}

type ManagementFeeSettledEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  sharesDue: BigDecimal!
  prevSettled: BigInt!
}

type PerformanceFeeSettingsAddedEvent implements Event & FundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  rate: BigDecimal!
  period: BigInt!
}

#################################################
# Low-level network event entities
#################################################

# VaultProxyDeployedEvent is both a fund event and a network event
type VaultProxyDeployedEvent implements Event & FundEvent & NetworkEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  fundDeployer: Contract!
  owner: Account!
  vaultLib: Contract!
  accessor: Contract!
  fundName: String!
}

type AdapterRegisteredEvent implements Event & NetworkEvent @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  integrationAdapter: IntegrationAdapter!
}

type AdapterDeregisteredEvent implements Event & NetworkEvent @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  integrationAdapter: IntegrationAdapter!
}

type PolicyRegisteredEvent implements Event & NetworkEvent @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  policy: Policy!
}

type PolicyDeregisteredEvent implements Event & NetworkEvent @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  policy: Policy!
}

type FundDeployerSetEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  nextFundDeployer: Contract!
  prevFundDeployer: Contract
  transaction: Transaction!
}

type AmguPriceSetEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  price: BigDecimal!
  transaction: Transaction!
}

type MlnTokensBurnedEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  amount: BigDecimal!
  transaction: Transaction!
}

type FrozenEtherThawedEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  amount: BigDecimal!
  transaction: Transaction!
}

type AmguPaidInEtherEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  amount: BigDecimal!
  transaction: Transaction!
}

type EtherTakerAddedEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  etherTaker: String!
  transaction: Transaction!
}

type EtherTakerRemovedEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  etherTaker: String!
  transaction: Transaction!
}

type OwnershipTransferredEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  previousOwner: String!
  newOwner: String!
  timestamp: BigInt!
  transaction: Transaction!
}

type PriceFeedSetEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  derivative: Asset!
  nextPriceFeed: String!
  prevPriceFeed: String!
}

type AggregatorSetEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  primitive: Asset!
  nextPriceFeed: String!
  prevPriceFeed: String!
}

type FeeRegisteredEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  fee: Fee!
  identifier: String!
}

type FeeDeregisteredEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  fee: Fee!
  identifier: String!
}

type ChainlinkAggregatorAnswerUpdatedEvent implements Event & NetworkEvent @entity {
  id: ID!
  contract: Contract!
  aggregator: ChainlinkAggregator!
  timestamp: BigInt!
  transaction: Transaction!
  asset: Asset!
  current: BigDecimal!
  roundId: BigInt!
  updatedAt: BigInt!
}

#################################################
# High-level entities
#################################################

type Transaction @entity {
  id: ID!
  from: String!
  to: String
  contract: Contract
  value: BigDecimal!
  timestamp: BigInt!
  block: BigInt!
  gasUsed: Int!
  gasPrice: BigDecimal!
  input: String!
  events: [Event!]! @derivedFrom(field: "transaction")
}

type Contract @entity {
  id: ID!
  name: String!
  events: [Event!]! @derivedFrom(field: "contract")
}

type Fund @entity {
  id: ID!
  accessor: String!
  name: String!
  inception: BigInt!
  release: Release!
  status: String!
  manager: Account!
  migrator: String
  denominationAsset: Asset!
  trackedAssets: [Asset!]!
  policies: [PolicySetting!]! @derivedFrom(field: "fund")
  fees: [FeeSetting!]! @derivedFrom(field: "fund")
  investments: [Investment!]! @derivedFrom(field: "fund")
  shares: Share!
  sharesHistory: [Share!]! @derivedFrom(field: "fund")
  portfolio: Portfolio!
  portfolioHistory: [Portfolio!]! @derivedFrom(field: "fund")
  feePayout: FeePayout!
  feePayoutHistory: [FeePayout!]! @derivedFrom(field: "fund")
  state: State!
  stateHistory: [State!]! @derivedFrom(field: "fund")
  events: [FundEvent!]! @derivedFrom(field: "fund")
  creator: Account!
  migrations: [Migration!] @derivedFrom(field: "fund")
}

type Migration @entity {
  id: ID!
  prevRelease: Release!
  nextRelease: Release!
  fund: Fund!
  signalTimestamp: BigInt!
  executed: Boolean!
  cancelled: Boolean!
  nextAccessor: String!
}

type Release @entity {
  id: ID!
  current: Boolean!
  open: BigInt!
  close: BigInt
  funds: [Fund!] @derivedFrom(field: "release")
}

type Account @entity {
  id: ID!
  firstSeen: BigInt!
  manager: Boolean!
  managements: [Fund!]! @derivedFrom(field: "manager")
  investor: Boolean!
  investments: [Investment!]! @derivedFrom(field: "investor")
  events: [FundEvent!]! @derivedFrom(field: "account")
}

type Investment @entity {
  id: ID!
  fund: Fund!
  investor: Account!
  changes: [SharesChange!]! @derivedFrom(field: "investment")
  shares: BigDecimal!
}

type Fee @entity {
  id: ID!
  identifier: String!
  funds: [Fund!]!
}

type ManagementFeeSetting implements FeeSetting @entity {
  id: ID!
  fee: Fee!
  fund: Fund!
  rate: BigDecimal!
  timestamp: BigInt!
  events: [FundEvent!]!
}

type PerformanceFeeSetting implements FeeSetting @entity {
  id: ID!
  fee: Fee!
  fund: Fund!
  rate: BigDecimal!
  period: BigInt!
  timestamp: BigInt!
  events: [FundEvent!]!
}

type IntegrationAdapter @entity {
  id: ID!
  identifier: String!
}

type Policy @entity {
  id: ID!
  identifier: String!
  funds: [Fund!]!
  settings: [PolicySetting!]! @derivedFrom(field: "policy")
}

type AdapterBlacklistSetting implements PolicySetting @entity {
  id: ID!
  policy: Policy!
  fund: Fund!
  listed: [IntegrationAdapter!]!
  timestamp: BigInt!
  events: [FundEvent!]!
}

type AdapterWhitelistSetting implements PolicySetting @entity {
  id: ID!
  policy: Policy!
  fund: Fund!
  listed: [IntegrationAdapter!]!
  timestamp: BigInt!
  events: [FundEvent!]!
}

type AssetBlacklistSetting implements PolicySetting @entity {
  id: ID!
  policy: Policy!
  fund: Fund!
  listed: [Asset!]!
  timestamp: BigInt!
  events: [FundEvent!]!
}

type AssetWhitelistSetting implements PolicySetting @entity {
  id: ID!
  policy: Policy!
  fund: Fund!
  listed: [Asset!]!
  timestamp: BigInt!
  events: [FundEvent!]!
}

type InvestorWhitelistSetting implements PolicySetting @entity {
  id: ID!
  policy: Policy!
  fund: Fund!
  listed: [Account!]!
  timestamp: BigInt!
  events: [FundEvent!]!
}

type MaxConcentrationSetting implements PolicySetting @entity {
  id: ID!
  policy: Policy!
  fund: Fund!
  maxConcentration: BigDecimal!
  timestamp: BigInt!
  events: [FundEvent!]!
}

type Share implements Metric @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  shares: BigDecimal!
  events: [FundEvent!]!
}

type Holding implements Metric @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  asset: Asset!
  quantity: BigDecimal!
  events: [FundEvent!]!
}

type Portfolio implements Metric @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  holdings: [Holding!]!
  events: [FundEvent!]!
}

type State implements Metric @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  shares: Share!
  portfolio: Portfolio!
  feePayout: FeePayout!
  events: [FundEvent!]!
}

type FeePayout implements Metric @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  shares: BigDecimal!
  individualPayouts: [IndividualFeePayout!]!
  events: [FundEvent!]!
}

type IndividualFeePayout implements Metric @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  fee: Fee!
  shares: BigDecimal!
  events: [FundEvent!]!
}

#################################################
# Assets and prices
#################################################

type Asset @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!

  # Latest price and candles
  price: AssetPrice
  hourly: HourlyAssetPriceCandle
  daily: DailyAssetPriceCandle
  weekly: WeeklyAssetPriceCandle

  # Historical prices and candles
  priceHistory: [AssetPrice!]! @derivedFrom(field: "asset")
  hourlyHistory: [HourlyAssetPriceCandle!]! @derivedFrom(field: "asset")
  dailyHistory: [DailyAssetPriceCandle!]! @derivedFrom(field: "asset")
  weeklyHistory: [WeeklyAssetPriceCandle!]! @derivedFrom(field: "asset")

  # Fund references
  denominatedFunds: [Fund!]! @derivedFrom(field: "denominationAsset")
  trackingFunds: [Fund!]! @derivedFrom(field: "trackedAssets")
}

type AssetPrice @entity {
  id: ID!
  asset: Asset!
  price: BigDecimal!
  timestamp: BigInt!
}

type HourlyAssetPriceCandle @entity {
  id: ID!
  asset: Asset!
  group: HourlyAssetPriceCandleGroup!
  from: BigInt!
  to: BigInt!
  open: BigDecimal!
  openRef: AssetPrice!
  close: BigDecimal!
  closeRef: AssetPrice!
  low: BigDecimal!
  lowRef: AssetPrice!
  high: BigDecimal!
  highRef: AssetPrice!
}

type DailyAssetPriceCandle @entity {
  id: ID!
  asset: Asset!
  group: DailyAssetPriceCandleGroup!
  from: BigInt!
  to: BigInt!
  open: BigDecimal!
  openRef: AssetPrice!
  close: BigDecimal!
  closeRef: AssetPrice!
  low: BigDecimal!
  lowRef: AssetPrice!
  high: BigDecimal!
  highRef: AssetPrice!
}

type WeeklyAssetPriceCandle @entity {
  id: ID!
  asset: Asset!
  group: WeeklyAssetPriceCandleGroup!
  from: BigInt!
  to: BigInt!
  open: BigDecimal!
  openRef: AssetPrice!
  close: BigDecimal!
  closeRef: AssetPrice!
  low: BigDecimal!
  lowRef: AssetPrice!
  high: BigDecimal!
  highRef: AssetPrice!
}

type HourlyAssetPriceCandleGroup @entity {
  id: ID!
  from: BigInt!
  to: BigInt!
  candles: [HourlyAssetPriceCandle!]! @derivedFrom(field: "group")
}

type DailyAssetPriceCandleGroup @entity {
  id: ID!
  from: BigInt!
  to: BigInt!
  candles: [DailyAssetPriceCandle!]! @derivedFrom(field: "group")
}

type WeeklyAssetPriceCandleGroup @entity {
  id: ID!
  from: BigInt!
  to: BigInt!
  candles: [WeeklyAssetPriceCandle!]! @derivedFrom(field: "group")
}

type ChainlinkAggregator @entity {
  id: ID!
  asset: Asset!
  active: Boolean!
  updates: [ChainlinkAggregatorAnswerUpdatedEvent!]! @derivedFrom(field: "aggregator")
}

# Knowing the timestamp of the most recent update allows us to create missing
# candles / fill gaps and decide when to re-fetch prices for our derivatives.
# Every time a new hour / day / week is started (checked with modulo based
# on the timestamp), we create new group entities and also fill gaps in the
# candles. We can always load the most recent candles because we know the
# when it was most recently updated.
type Cron @entity {
  id: ID!

  # The last time that cron was triggered.
  cron: BigInt!

  # The currently tracked primitives. This is used to know which assets we
  # need to maintain candles for.
  primitives: [Asset!]!

  # The currently tracked derivatives. This is used to know which derivatives
  # to fetch prices for (as a side effect, because they don't have a dedicated
  # price oracle that emits events on their behalf) and to update their candles.
  derivatives: [Asset!]!
}
